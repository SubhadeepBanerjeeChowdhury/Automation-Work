from fuzzywuzzy import fuzz

sheet_names = ["BLT Mgmt", "ChelseaGroton", "Chelsea Groton Bank", "Aurora P"]
groups = ["Aurora Productions INC", "BLT Management Inc", 'Chelsea Groton Bank Inc', 'Aurroras Productions']

# Define the fuzzy matching methods to be used
matching_methods = ['partial_ratio', 'token_set_ratio', 'ratio', 'token_sort_ratio', 'WRatio', 'partial_token_sort_ratio']

# Initialize a dictionary to store the best match for each sheet name and its highest similarity score across all methods
best_matches = {}

# Iterate through each sheet name
for sheet_name in sheet_names:
    # Initialize variables to store the best match and its highest similarity score
    best_match = None
    best_score = 0
    
    # Iterate through each group to find the best match using all matching methods
    for group in groups:
        # Initialize variable to store the highest score among all methods for the current group
        group_best_score = 0
        
        # Iterate through each matching method
        for method in matching_methods:
            # Calculate the similarity score between the sheet name and group using the current method
            score = getattr(fuzz, method)(sheet_name.lower(), group.lower())
            
            # Update the highest score for the current group if the current score is higher
            group_best_score = max(group_best_score, score)
        
        # Update best match and its score if the current group's highest score is higher than the overall best score
        if group_best_score > best_score:
            best_match = group
            best_score = group_best_score
    
    # Save the best match and its highest score in the dictionary
    best_matches[sheet_name] = {'group': best_match, 'score': best_score}

# Print the results
for sheet_name, match_info in best_matches.items():
    print(f"Sheet name: {sheet_name}, Best match: {match_info['group']}, Highest similarity score: {match_info['score']}")



******************
07/04/2024

MNS ID EXTRACTION:

import re

text = 'ADP MNS21-25, MNS 67-69 & 52, MNS 54-58, MNS44-49'

# Extract the range
mns_values = []
range_matches = re.findall(r'(?:MNS\s*)?(\d+)-(\d+)|\b(\d+)\b', text)

if range_matches:
    for match in range_matches:
        if match[0] and match[1]:  # Range pattern matched
            start_num = int(match[0])
            end_num = int(match[1])
            mns_values.extend([f'MNS{str(i).zfill(7)}' for i in range(start_num, end_num + 1)])
        elif match[2]:  # Individual number matched
            single_num = int(match[2])
            mns_values.append(f'MNS{str(single_num).zfill(7)}')

if mns_values:
    print(mns_values)
else:
    print("No match found.")


*******************************************************
08/04/2024


import pandas as pd

def process_dataframe(dataframe, date_or_group):
    # Assuming 'MNS FILTER' and 'CONTRACT OPT EFF DATE' are column names in the DataFrame
    MNS_FILTER = 'MNS FILTER'
    CONTRACT_OPT_EFF_DATE = 'CONTRACT OPT EFF DATE'
    PLAN_ID = 'PLAN ID'
    
    # Filtering DataFrame where MNS FILTER is 'MNS'
    df_filtered = dataframe[dataframe[MNS_FILTER] == 'MNS']
    
    # Filtering DataFrame where 'CONTRACT OPT EFF DATE' matches the user given date or group name
    if isinstance(date_or_group, str):
        df_filtered = df_filtered[df_filtered[CONTRACT_OPT_EFF_DATE] == date_or_group]
    elif isinstance(date_or_group, pd.Timestamp):  # If date is provided as pandas Timestamp
        df_filtered = df_filtered[df_filtered[CONTRACT_OPT_EFF_DATE] == date_or_group.strftime('%Y-%m-%d')]
    else:
        raise ValueError("Invalid input type. Please provide either a date (string or Timestamp) or a group name (string).")
    
    # Making a list of all elements in the 'PLAN ID' column
    plan_ids = df_filtered[PLAN_ID].tolist()
    
    return plan_ids

# Example usage:
# Assuming 'path' is your data and 'date_or_group' is either a date string or group name
# df = pd.DataFrame(path)
# result = process_dataframe(df, '1998-12-01')  # Example date
# result = process_dataframe(df, 'Group Name')  # Example group name


*************************************************************************************


# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Noise Reduction
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Thresholding
_, thresh = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Dilation and Erosion
kernel = np.ones((3, 3), np.uint8)
thresh = cv2.dilate(thresh, kernel, iterations=1)
thresh = cv2.erode(thresh, kernel, iterations=1)
***************************************************************************************




def key_correction(input_string):
    # Define the replacements for each pattern
    replacements = [
        'Family Deductible:',
        'Single Deductible:',
        'Family M.O.O.P.',
        'Single M.O.O.P.'
    ]

    # Define the regex patterns for each case
    patterns = [
        r'Family De.*?(\s|$)',
        r'Single De.*?(\s|$)',
        r'Family M.*?(\s|$)',
        r'Single M.*?(\s|$)'
    ]

    # Replace occurrences of each pattern with the corresponding replacement string
    for pattern, replacement in zip(patterns, replacements):
        input_string = re.sub(pattern, replacement, input_string, flags=re.IGNORECASE)

    return input_string


**************************************
img = cv2.imread(r'E:\Downloads\i0RDA.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Remove horizontal lines
thresh = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY_INV,81,17)
horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (25,1))

# Using morph close to get lines outside the drawing
remove_horizontal = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, horizontal_kernel, iterations=3)
cnts = cv2.findContours(remove_horizontal, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if len(cnts) == 2 else cnts[1]
mask = np.zeros(gray.shape, np.uint8)
for c in cnts:
    cv2.drawContours(mask, [c], -1, (255,255,255),2)

# First inpaint
img_dst = cv2.inpaint(img, mask, 3, cv2.INPAINT_TELEA)


********************************


# Read the image

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Remove horizontal lines
thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 81, 17)
horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (25, 1))
remove_horizontal = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, horizontal_kernel, iterations=3)

# Find contours of the horizontal lines
cnts = cv2.findContours(remove_horizontal, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if len(cnts) == 2 else cnts[1]
mask = np.zeros(gray.shape, np.uint8)
for c in cnts:
    cv2.drawContours(mask, [c], -1, (255, 255, 255), 2)

# Dilate the mask to include text areas
mask = cv2.dilate(mask, np.ones((3, 3), np.uint8), iterations=2)

# Inpaint the image, excluding text areas
image = cv2.inpaint(img, mask, 3, cv2.INPAINT_TELEA)
