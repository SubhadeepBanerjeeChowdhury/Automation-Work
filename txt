def update_family_value(df, ind_col, family_col):
    for i, row in df.iterrows():
        if row[ind_col].isdigit() and row[family_col] == '':
            df.at[i, family_col] = str(int(row[ind_col]) * 2)

# List of column pairs to apply the logic to
column_pairs = [
    ('IND DEDUCTIBLE INN', 'FAMILY DEDUCTIBLE INN'),
    ('IND DEDUCTIBLE OON', 'FAMILY DEDUCTIBLE OON'),
    ('IND OOP INN', 'FAMILY OOP INN'),
    ('IND OOP OON', 'FAMILY OOP OON')
]

# Apply the function to each column pair
for ind_col, family_col in column_pairs:
    update_family_value(oxford_final, ind_col, family_col)


*********************************
import cv2

# Load the image
image = cv2.imread(r"C:\Users\Subhadeep\Downloads\Book-2.png")

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply a threshold to get a binary image
_, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Find contours of the text regions
contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Initialize variables to store the rightmost and bottommost coordinates
rightmost = 0
bottommost = 0

# Loop through all contours to find the rightmost and bottommost coordinates
for contour in contours:
    x, y, w, h = cv2.boundingRect(contour)
    rightmost = max(rightmost, x + w)
    bottommost = max(bottommost, y + h)

# Add a buffer to the bounding box
buffer = 10
x = rightmost + buffer
y = bottommost + buffer


# Crop the image using the calculated bounding box
cropped_image = image[:y, :x]


import matplotlib.pyplot as plt
plt.imshow(cv2.cvtColor(cropped_image, cv2.COLOR_BGR2RGB))
plt.axis('off')  # Turn off axis
plt.show()



from openpyxl import load_workbook
from openpyxl.styles import PatternFill

def highlight_cells(df, file_path):
    # Save DataFrame to an Excel file
    df.to_excel(file_path, index=False)

    # Load the workbook and select the active worksheet
    wb = load_workbook(file_path)
    ws = wb.active

    # Define the fill for yellow and red colors
    yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
    red_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

    # Iterate over the rows and apply conditional formatting
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
        highlight_row = None  # No highlight by default
        for cell in row:
            if 'NOT' in str(cell.value):
                highlight_row = yellow_fill
                break  # No need to check further cells in this row
            if 'OMITTED' in str(cell.value):
                highlight_row = red_fill
                break  # No need to check further cells in this row
        if highlight_row:
            for cell in row:
                cell.fill = highlight_row

    # Save the workbook with the formatting
    wb.save(file_path)

# Sample DataFrame
data = {
    'Column1': ['Value1', 'NOT', 'Value3', 'OMITTED'],
    'Column2': ['Value2', 'Value4', 'NOT', 'Value5'],
    'Column3': ['OMITTED', 'Value6', 'Value7', 'Value8']
}

df = pd.DataFrame(data)
file_path = r'C:\Users\Subhadeep\Downloads\highlighted_rows.xlsx'

# Execute the highlight_cells function on the DataFrame
highlight_cells(df, file_path)
